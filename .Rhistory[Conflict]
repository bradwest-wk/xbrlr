df
df %>% plot_ly(x = Var1, y = Var2, z = value, source = 'matrix',
key = value, type = 'heatmap', text = value)
names(df)
df %>% plot_ly(z = value, source = 'matrix',
key = value, type = 'heatmap', text = value)
plot_ly(df, x = Var1, y = Var2, z = value, source = 'matrix',
key = value, type = 'heatmap', text = value)
plot_ly(df, x = 'Var1', y = 'Var2', z = 'value', source = 'matrix',
key = 'value', type = 'heatmap', text = 'value')
plot_ly(x = nms, y = nms, z = sim, source = 'matrix',
key = sim, type = 'heatmap', text = sim)
nms <- names(sim)
plot_ly(x = nms, y = nms, z = sim, source = 'matrix',
key = sim, type = 'heatmap', text = sim)
names(sim)
nms <- colnames(sim)
nms
nms <- colnames(sim)
plot_ly(x = nms, y = nms, z = sim, source = 'matrix',
key = sim, type = 'heatmap', text = sim) %>%
layout()
plot_ly(x = nms, y = nms, z = sim, source = 'matrix',
key = sim, type = 'heatmap', text = sim) %>%
layout(xaxis = ax, yaxis = ay, showlegend = TRUE,
margin = list(b = 275, l = 450, pad = 10))
ax <- list(
showticklabels = TRUE,
tickangle = -30
tickfont = f1,
margin = list,
showgrid = TRUE
)
ax <- list(
showticklabels = TRUE,
tickangle = -30,
tickfont = f1,
margin = list,
showgrid = TRUE
)
plot_ly(x = nms, y = nms, z = sim, source = 'matrix',
key = sim, type = 'heatmap', text = sim) %>%
layout(xaxis = ax, yaxis = ay, showlegend = TRUE,
margin = list(b = 275, l = 450))
plot_ly(x = nms, y = nms, z = sim, source = 'matrix',
key = sim, type = 'heatmap', text = sim, name = 'Usage') %>%
layout(xaxis = ax, yaxis = ay, showlegend = TRUE,
margin = list(b = 275, l = 450))
plot_ly(x = nms, y = nms) %>%
add_trace(z = sim, source = 'matrix',
key = sim, type = 'heatmap',
text = sim, name = 'Usage') %>%
layout(xaxis = ax, yaxis = ay, showlegend = TRUE,
margin = list(b = 275, l = 450))
plot_ly(x = nms, y = nms, source = 'matrix') %>%
add_trace(z = sim,
key = sim, type = 'heatmap',
text = sim, name = 'Usage') %>%
layout(xaxis = ax, yaxis = ay, showlegend = TRUE,
margin = list(b = 275, l = 450))
plot_ly(x = nms, y = nms, source = 'matrix') %>%
add_trace(z = sim,
key = sim, type = 'heatmap', name = 'Usage') %>%
layout(xaxis = ax, yaxis = ay, showlegend = TRUE,
margin = list(b = 275, l = 450))
?add_annotations
plot_ly(x = nms, y = nms, source = 'matrix') %>%
add_trace(z = sim,
key = sim, type = 'heatmap', name = 'Usage') %>%
add_annotations(text = sim) %>%
layout(xaxis = ax, yaxis = ay, showlegend = TRUE,
margin = list(b = 275, l = 450))
plot_ly(x = nms, y = nms, source = 'matrix') %>%
add_trace(z = sim,
key = sim, type = 'heatmap', name = 'Usage') %>%
add_annotations(x = nms,
y = nms,
text = sim,
showarrow = FALSE) %>%
layout(xaxis = ax, yaxis = ay, showlegend = TRUE,
margin = list(b = 275, l = 450))
?add_text
plot_ly(x = nms, y = nms, source = 'matrix') %>%
add_trace(z = sim,
key = sim, type = 'heatmap', name = 'Usage') %>%
add_text(x = nms, y = nms, text = sim) %>%
layout(xaxis = ax, yaxis = ay, showlegend = TRUE,
margin = list(b = 275, l = 450))
ax <- list(
showticklabels = TRUE,
tickfont = f1,
margin = list,
showgrid = TRUE,
gridcolor = 'black'
)
ay <- list(
tickangle = -30,
tickfont = f1,
showgrid = TRUE,
gridcolor = 'black'
)
ggplotly(plot, tooltip = c('Var1', 'Var2', 'value')) %>%
layout(xaxis = ax, yaxis = ay, showlegend = TRUE,
margin = list(b = 275, l = 450, pad = 10),
titlefont = title,
font = list(size = 4))
plot <- plot_ggplot_mat(sim, main = 'testing')
plot
Create a select list input control
selectInput(inputId, label, choices, selected = NULL, multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL)
selectizeInput(inputId, ..., options = NULL, width = NULL)
Arguments
inputId	The input slot that will be used to access the value.
label	Display label for the control, or NULL for no label.
choices	List of values to select from. If elements of the list are named, then that name rather than the value is displayed to the user. This can also be a named list whose elements are (either named or unnamed) lists or vectors. If this is the case, the outermost names will be used as the "optgroup" label for the elements in the respective sublist. This allows you to group and label similar choices. See the example section for a small demo of this feature.
selected	The initially selected value (or multiple values if multiple = TRUE). If not specified then defaults to the first value for single-select lists and no values for multiple select lists.
multiple	Is selection of multiple items allowed?
selectize	Whether to use selectize.js or not.
width	The width of the input, e.g. '400px', or '100%'; see validateCssUnit.
size	Number of items to show in the selection box; a larger number will result in a taller box. Not compatible with selectize=TRUE. Normally, when multiple=FALSE, a select input will be a drop-down list, but when size is set, it will be a box instead.
...	Arguments passed to selectInput().
options	A list of options. See the documentation of selectize.js for possible options (character option values inside I() will be treated as literal JavaScript code; see renderDataTable() for details).
Value
A select list control that can be added to a UI definition.
Description
Create a select list that can be used to choose a single or multiple items from a list of values.
Details
By default, selectInput() and selectizeInput() use the JavaScript library selectize.js (https://github.com/selectize/selectize.js) to instead of the basic select input element. To use the standard HTML select input element, use selectInput() with selectize=FALSE.
In selectize mode, if the first element in choices has a value of "", its name will be treated as a placeholder prompt. For example: selectInput("letter", "Letter", c("Choose one" = "", LETTERS))
Note
The selectize input created from selectizeInput() allows deletion of the selected option even in a single select input, which will return an empty string as its value. This is the default behavior of selectize.js. However, the selectize input created from selectInput(..., selectize = TRUE) will ignore the empty string value when it is a single choice input and the empty string is not in the choices argument. This is to keep compatibility with selectInput(..., selectize = FALSE).
Examples
## Only run examples in interactive R sessions
if (interactive()) {
# basic example
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
# demoing optgroup support in the `choices` arg
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = c("NY", "NJ", "CT"),
`West Coast` = c("WA", "OR", "CA"),
`Midwest` = c("MN", "WI", "IA"))
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
}
library(shiny)
Create a select list input control
selectInput(inputId, label, choices, selected = NULL, multiple = FALSE,
selectize = TRUE, width = NULL, size = NULL)
selectizeInput(inputId, ..., options = NULL, width = NULL)
Arguments
inputId	The input slot that will be used to access the value.
label	Display label for the control, or NULL for no label.
choices	List of values to select from. If elements of the list are named, then that name rather than the value is displayed to the user. This can also be a named list whose elements are (either named or unnamed) lists or vectors. If this is the case, the outermost names will be used as the "optgroup" label for the elements in the respective sublist. This allows you to group and label similar choices. See the example section for a small demo of this feature.
selected	The initially selected value (or multiple values if multiple = TRUE). If not specified then defaults to the first value for single-select lists and no values for multiple select lists.
multiple	Is selection of multiple items allowed?
selectize	Whether to use selectize.js or not.
width	The width of the input, e.g. '400px', or '100%'; see validateCssUnit.
size	Number of items to show in the selection box; a larger number will result in a taller box. Not compatible with selectize=TRUE. Normally, when multiple=FALSE, a select input will be a drop-down list, but when size is set, it will be a box instead.
...	Arguments passed to selectInput().
options	A list of options. See the documentation of selectize.js for possible options (character option values inside I() will be treated as literal JavaScript code; see renderDataTable() for details).
Value
A select list control that can be added to a UI definition.
Description
Create a select list that can be used to choose a single or multiple items from a list of values.
Details
By default, selectInput() and selectizeInput() use the JavaScript library selectize.js (https://github.com/selectize/selectize.js) to instead of the basic select input element. To use the standard HTML select input element, use selectInput() with selectize=FALSE.
In selectize mode, if the first element in choices has a value of "", its name will be treated as a placeholder prompt. For example: selectInput("letter", "Letter", c("Choose one" = "", LETTERS))
Note
The selectize input created from selectizeInput() allows deletion of the selected option even in a single select input, which will return an empty string as its value. This is the default behavior of selectize.js. However, the selectize input created from selectInput(..., selectize = TRUE) will ignore the empty string value when it is a single choice input and the empty string is not in the choices argument. This is to keep compatibility with selectInput(..., selectize = FALSE).
Examples
## Only run examples in interactive R sessions
if (interactive()) {
# basic example
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
# demoing optgroup support in the `choices` arg
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = c("NY", "NJ", "CT"),
`West Coast` = c("WA", "OR", "CA"),
`Midwest` = c("MN", "WI", "IA"))
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
}
get(cf)
?get
nms <- list('tree' = c(1,2))
nms
nms <- unique(cf$ref)
names(nms)
nms
try(names(nms) <- stringr::str_split(nms[2], '(')[[1]])
?stringr::str_split
library(stringi)
library(stringr)
str_split(nms[2], '(')
str_split(nms[2], '-')
str_split(nms[2], '\(')
str_split(nms[2], '()')
str_split(nms[2], '[()]')
str_split(nms[2], '[(]')
str_split(nms[2], '[()]')
str_split(nms[3], '[()]')
try(names(nms) <- stringr::str_split(nms[2], '[()]')[[1]][1])
names(nms)
?name
try(name(nms) <- stringr::str_split(nms[2], '[()]')[[1]][1])
try(as.name(nms) <- stringr::str_split(nms[2], '[()]')[[1]][1])
choices <- list()
nms <- unique(cf$ref)
try(group <- stringr::str_split(nms[2], '[()]')[[1]][1])
choices[group] <- nms
choices[[group]] <- nms
choices
?req
?observe
?observeEvent
runApp('inst/shiny/adj_matrix')
?observe
?reactive
runApp('inst/shiny/adj_matrix')
runApp('inst/shiny/adj_matrix')
runApp('inst/shiny/adj_matrix')
?saveRDS
?format
format(Sys.Date(), '%b %d, %Y')
library(shiny)
install.packages('visNetwork')
?runApp
runApp(appDir = './inst/shiny/upload_iso/', port = 4642)
runApp(appDir = './inst/shiny/upload_iso/', port = 4642)
library(rsconnect)
install.packages('rsconnect')
library(rsconnect)
?showLogs
showLogs("./inst/shiny/iso_upload")
?setAccountInfo
showLogs("./inst/shiny/upload_iso")
rsconnect::setAccountInfo(name='bradwest-wk',
token='BE2C800F42BD98434A8C7F6023F3A015',
secret='<SECRET>')
rsconnect::setAccountInfo(name='bradwest-wk',
token='BE2C800F42BD98434A8C7F6023F3A015',
secret='<SECRET>')
rsconnect::setAccountInfo(name='bradwest-wk',
token='BE2C800F42BD98434A8C7F6023F3A015',
secret='g5hItmqzQwQ8ENtBQL2HAw87f4tktbmmN6UfLCdS')
showLogs("./inst/shiny/iso_upload")
?showLogs
showLogs("./inst/shiny/iso_upload", appName = 'upload_iso', account = 'bradwest-wk')
showLogs("./inst/shiny/iso_upload", appName = 'upload_iso')
showLogs("./inst/shiny/iso_upload", appName = 'upload_iso', entries = 1000)
full_logs <- showLogs("./inst/shiny/iso_upload", appName = 'upload_iso', entries = 10000)
sink("./inst/shiny/upload_iso/logs/upload_iso_2017_09_29.log")
showLogs("./inst/shiny/iso_upload", appName = 'upload_iso', entries = 100000)
showLogs("./inst/shiny/iso_upload", appName = 'upload_iso', entries = 10000)
sink()
sink("./inst/shiny/upload_iso/logs/upload_iso_2017_09_29.log")
showLogs("./inst/shiny/iso_upload", appName = 'upload_iso', entries = 20000)
sink()
runApp(appDir = './inst/shiny/upload_iso/', port = 4642)
?need
runApp(appDir = './inst/shiny/upload_iso/', port = 4642)
runApp(appDir = './inst/shiny/upload_iso/', port = 4642)
library(shiny)
library(googlesheets)
library(visNetwork)
library(igraph)
?showNotification
?runApp
runApp
runApp("./inst/shiny/upload_iso/", port = 8084, launch.browser = TRUE)
runApp("./inst/shiny/upload_iso/", port = 4642, launch.browser = TRUE)
runApp("./inst/shiny/upload_iso/", port = 4642, launch.browser = TRUE)
?try
library(shiny)
runApp("./inst/shiny/upload_iso/", port = 4642, launch.browser = TRUE)
runApp("./inst/shiny/upload_iso/", port = 4642, launch.browser = TRUE)
runApp("./inst/shiny/upload_iso/", port = 4642, launch.browser = TRUE)
?need
sht <- googlesheets::gs_title(ixbrl_tes)
sht <- googlesheets::gs_title('ixbrl_tes')
sht <- NULL
sht <- googlesheets::gs_title('ixbrl_tes')
sht
runApp('inst/shiny/test_shiny')
runApp('inst/shiny/test_shiny')
install.packages('DT')
?textInput
runApp('inst/shiny/test_shiny')
runApp('inst/shiny/test_shiny')
runApp('inst/shiny/test_shiny')
runApp('inst/shiny/test_shiny')
runApp('inst/shiny/test_shiny')
runApp('inst/shiny/test_shiny')
runApp('inst/shiny/test_shiny')
runApp('inst/shiny/test_shiny')
head(sht)
head(sht)
runApp('inst/shiny/test_shiny')
runApp('inst/shiny/test_shiny')
runApp('inst/shiny/test_shiny')
runApp('inst/shiny/test_shiny')
runApp('inst/shiny/test_shiny', port = 4642, launch.browser = T)
runApp('inst/shiny/test_shiny', port = 4642, launch.browser = T)
runApp('inst/shiny/test_shiny', port = 4642, launch.browser = T)
runApp('inst/shiny/test_shiny', port = 4642, launch.browser = T)
runApp('inst/shiny/test_shiny', port = 4642, launch.browser = T)
runApp('inst/shiny/upload_iso', port = 4642, launch.browser = T)
runApp('inst/shiny/upload_iso', port = 4642, launch.browser = T)
runApp('inst/shiny/upload_iso', port = 4642, launch.browser = T)
runApp('inst/shiny/upload_iso', port = 4642, launch.browser = T)
library(rsconnect)
?deployApp
deployApp("./inst/shiny/upload_iso/")
library(rsconnect)
?deployApp
deployApp("./inst/shiny/upload_iso/")
library(shiny)
library(DT)
data(cars)
cars
runApp('inst/shiny/test_multiple_g_users')
runApp('inst/shiny/test_multiple_g_users')
runApp('inst/shiny/test_multiple_g_users')
data(sleep)
sleet
sleep
runApp('inst/shiny/test_multiple_g_users')
runApp(port=1221)
runApp('inst/shiny/test_multiple_g_users', port=1221)
library(googleAuthR)
library(googlesheets)
?callModule
runApp('inst/shiny/test_multiple_g_users', port=1221)
runApp('inst/shiny/test_multiple_g_users', port=1221)
runApp('inst/shiny/test_multiple_g_users', port=1221)
?with_shiny
library(googleAuthR)
?gar_api_generator
?with_shiny
library(googlesheets)
?gs_title
?gs_webapp_auth_url
?gs_webapp_get_token
library(shiny)
runApp("./inst/shiny/test_multiple_g_users", port = 1221, launch.browser = TRUE)
runApp("./inst/shiny/test_multiple_g_users", port = 1221, launch.browser = TRUE)
runApp("./inst/shiny/test_multiple_g_users", port = 1221, launch.browser = TRUE)
runApp("./inst/shiny/test_multiple_g_users", port = 1221, launch.browser = TRUE)
runApp("./inst/shiny/test_multiple_g_users", port = 1221, launch.browser = TRUE)
?gar_api_generator
?grep
grep('/spreadsheets/d/([a-zA-Z0-9-_]+)' ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', value = TRUE)
grep('(/spreadsheets/d/([a-zA-Z0-9-_]+))' ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', value = TRUE)
grep("/spreadsheets/d/([a-zA-Z0-9-_]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', value = TRUE)
library(stringr)
grep("/spreadsheets/d/([a-zA-Z0-9-_]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', value = TRUE, perl = T)
grep("/spreadsheets/d/([a-zA-Z0-9-_]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', value = F, perl = T)
regexec("/spreadsheets/d/([a-zA-Z0-9-_]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', value = F, perl = T)
regexec("/spreadsheets/d/([a-zA-Z0-9-_]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', perl = T)
regexpr("/spreadsheets/d/([a-zA-Z0-9-_]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', perl = T)
gregexpr("/spreadsheets/d/([a-zA-Z0-9-_]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', perl = T)
?substring
regexpr("/spreadsheets/d/([a-zA-Z0-9-_]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', perl = T)
m <- regexpr("/spreadsheets/d/([a-zA-Z0-9-_]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', perl = T)
regmatches('https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', m)
m <- regexpr("/spreadsheets/d/([a-zA-Z0-9-_]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', perl = F)
m <- regexpr("/spreadsheets/d/([a-zA-Z0-9-_]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', perl = T)
n <- regexpr("[#&]gid=([0-9]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', perl = T)
regmatches('https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', n)
m <- regexpr("(?<=/spreadsheets/d/)([a-zA-Z0-9-_]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', perl = F)
m <- regexpr("(?<=/spreadsheets/d/)[a-zA-Z0-9-_]+" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', perl = F)
m <- regexpr("(?<=(/spreadsheets/d/))[a-zA-Z0-9-_]+" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', perl = F)
m <- regexpr("(?<=(/spreadsheets/d/))([a-zA-Z0-9-_]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', perl = F)
m <- regexpr("(?<=(/spreadsheets/d/))([a-zA-Z0-9-_]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', perl = T)
regmatches('https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', m)
n <- regexpr("(?<=[#&]gid=)([0-9]+)" ,'https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', perl = T)
regmatches('https://docs.google.com/spreadsheets/d/1XJ53I_fs3OaEYh0bbCsfwK9fxc6m4Jiu_MVjaO1D8ZA/edit#gid=375515998', n)
?gar_api_generator
paste0('Sheet1', "!A:B")
?data.frame
?as.data.frame
a=c(c(1,2), c(3,4))
a
a = list(c(1,2), c(3,4))
a
names(a) <- c('one', 'two')
a
runApp("./inst/shiny/test_multiple_g_users/", launch.browser = T, port = 1221)
runApp("./inst/shiny/test_multiple_g_users/", launch.browser = T, port = 1221)
?eventReactive
runApp("./inst/shiny/test_multiple_g_users/", launch.browser = T, port = 1221)
library(shiny)
library(DT)
library(googlesheets)
library(googleAuthR)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
?verbatimTextOutput
library(jsonlite)
library(jsonlite)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
?str
?str
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
?renderText
?renderText
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('inst/shiny/upload_iso')
?callModule
?googleAuth
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = TRUE, port = 1221)
runApp('./inst/shiny/upload_iso/', launch.browser = TRUE, port = 4642)
library(shiny)
runApp("./inst/shiny/upload_iso/", launch.browser = T, port = 4642)
library(rsconnect)
deployApp('./inst/shiny/test_multiple_g_users/')
?withProgress
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = T, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = T, port = 1221)
library(shiny)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = T, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = T, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = T, port = 1221)
library(shiny)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = T, port = 1221)
library(rsconnect)
deployApp("./inst/shiny/test_multiple_g_users/")
?deployApp
getwd()
deployApp("./inst/shiny/test_multiple_g_users/")
deployApp("./inst/shiny/test_multiple_g_users/")
library(googleAuthR)
?googleAuth
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = T, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = T, port = 1221)
library(shiny)
library(googleAuthR)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = T, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = T, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = T, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = T, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = T, port = 1221)
runApp('./inst/shiny/test_multiple_g_users/', launch.browser = T, port = 1221)
runApp('./inst/shiny/test2/', launch.browser = T, port = 1221)
